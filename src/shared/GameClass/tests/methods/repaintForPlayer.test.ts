import { IGameDataEmoji, ITableFieldEmoji } from "@types";
import { GameClass, Color, Owner } from "@shared";

test("repaint cells for new owner", () => {
  const gameData: IGameDataEmoji = {
    matrix: [
      ["仇벒잺", "游비", "游릭", "游릭"],
      ["游눛", "游눝", "游릴", "游리"],
      ["游릭", "游눛", "游릳", "游릴"],
      ["游릮", "游댯", "游릵", "游린"],
      ["游리", "游릭", "游릱", "游릴"],
    ],
    currentPlayerNumber: 1,
    enemyPlayerNumber: 2,
    playerTurn: 1,
  };

  const gameClass = new GameClass(GameClass.gameDataConverter(gameData));

  gameClass.repaintForPlayer(Owner.playerOne, Color.orange);

  const afterRepaint1: ITableFieldEmoji = [
    ["游비", "游비", "游릭", "游릭"],
    ["游비", "游비", "游릴", "游리"],
    ["游릭", "游비", "游릳", "游릴"],
    ["游릮", "游댯", "游릵", "游린"],
    ["游리", "游릭", "游릱", "游릴"],
  ];

  const matrixAfterRepaint1 = GameClass.emojiToMatrixConverter(afterRepaint1);
  expect(gameClass.matrixNumbers).toEqual(matrixAfterRepaint1);

  gameClass.repaintForPlayer(Owner.playerTwo, Color.red);
  const afterRepaint2: ITableFieldEmoji = [
    ["游비", "游비", "游릭", "游릭"],
    ["游비", "游비", "游린", "游리"],
    ["游릭", "游비", "游린", "游린"],
    ["游릮", "游댯", "游린", "游린"],
    ["游리", "游릭", "游린", "游린"],
  ];
  const matrixAfterRepaint2 = GameClass.emojiToMatrixConverter(afterRepaint2);
  expect(gameClass.matrixNumbers).toEqual(matrixAfterRepaint2);
});
